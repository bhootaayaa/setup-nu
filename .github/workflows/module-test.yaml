name: nu-module-test

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/nu-lib
    paths-ignore:
      - '**.md'

env:
  NU_MODULE_DIRS: /home/runner;/home/runner/work/setup-nu/setup-nu/nu;/Users/runner/;/Users/runner/work/setup-nu/setup-nu/nu;D:\a;D:\a\setup-nu\setup-nu\nu

defaults:
  run:
    shell: nu {0}

jobs:
  test-latest:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    name: test (${{matrix.os}}, setup-nu@latest-dev)
    env:
      NU_MODULE_DIRS: /home/runner;/home/runner/work/setup-nu/setup-nu/nu;/Users/runner/;/Users/runner/work/setup-nu/setup-nu/nu;D:\a;D:\a\setup-nu\setup-nu\nu
    steps:
    - uses: actions/checkout@v3
    - name: Setup nu@latest
      uses: hustcer/setup-nu@develop
      with:
        version: '*'
        enable-plugins: true
      env:
        ACTIONS_STEP_DEBUG: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: You can run bash commands, too
      run: pwd && ls -la
      shell: bash
    - name: Test NU_LIB_DIRS 1
      run: |
        print 'Current NU_LIB_DIRS: '
        print $env.NU_LIB_DIRS
    - name: Default shell will be `nu`
      run: |
        print $'Nu version info:(char nl)'; print (version)
        print $'Current env:(char nl)'; print $env

        # Environment variable name for module directories, multiple directories should be separated by `;`
        const LIB_ENV = 'NU_MODULE_DIRS'

        def-env setup-lib-dirs [] {
          print $'Current working directory: ($env.PWD)'
          let module_dirs = ($env | get -i $LIB_ENV | default '' | str trim)
          if ($module_dirs | is-empty) { return }
          let dirs = (
            $module_dirs
              | split row ';'
              | each {|p| ($p | str trim | path expand) }
              | filter {|p| ($p | path exists) }
          )
          let-env NU_LIB_DIRS = ($env.NU_LIB_DIRS | append $dirs)
          print 'Current NU_LIB_DIRS: '
          print $env.NU_LIB_DIRS
        }
        setup-lib-dirs
        # use common.nu [get-env]
        # print (get-env 'ABC-XYZ' 'DEFAULT-ABC-XYZ')
        # print 'Current NU_LIB_DIRS:'
        # print $env.NU_LIB_DIRS
    - name: Test NU_LIB_DIRS 2
      run: |
        mkdir ($nu.config-path | path dirname | path join 'scripts')
        cp nu/common.nu ($nu.config-path | path dirname | path join 'scripts')
        print 'Current NU_LIB_DIRS: '
        print $env.NU_LIB_DIRS
        print (ls -l ($env.NU_LIB_DIRS | get 0 | path dirname))
    - name: Test Use Nu Modules
      run: |
        use common.nu [get-env]
        print 'Available Nu Modules:'
        print (ls ($env.NU_LIB_DIRS | get 0))
        print (get-env 'ABC-XYZ' 'DEFAULT-ABC-XYZ')



